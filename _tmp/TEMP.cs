using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using TimeOffTracker.Model;
using Microsoft.AspNetCore.Authorization;
using TimeOffTracker.Model.DTO;




// однострочные
// Наши пользщовательские коментарии

/*
	Многострочные
	Коментарии из "Time off tracker.docx"
	copy/paste 
 */ 



[Route("[controller]/[action]")]
[ApiController]
[Produces("application/json")]
[AllowAnonymous]
public class AllowAnonymousController : ControllerBase
{
    [HttpPost]
    string Login(AuthDto request)
    {
        //	Ну это уже есть
        return "tokne";
    }
}

[Route("[controller]/[action]")]
[ApiController]
[Produces("application/json")]
[Authorize]
public class AuthorizeController : ControllerBase
{
    void Loguot()
    {
        //	Нужен ли выход пользователя? в апи?
    }
}

/*
Администратор (Admin): встроенный пользователь
	◦ Регистрирует пользователя
	◦ определяет роль пользователя: Менеджер/Сотрудник.
 */
[Route("[controller]/[action]")]
[ApiController]
[Produces("application/json")]
[Authorize(Roles = "Admin")]
public class AdminController : ControllerBase
{
    [HttpGet]
    List<UserDto> GetUsers(UserDto filter = null)
    {
        //	Если фильтр filter == null то вернуть всех
        //	иначе вернуть похожие по указаному фильтру
        //	предусмотреть старныцы по 10 елементов на страницу
        return new List<UserDto>();
    }

    [HttpGet]
    UserDto GetUserDetatil(int id)
    {
        //	Вернуть пользователя
        return new UserDto();
    }

    [HttpPatch]
    void ModifyUserRole(UserDto user_whit_new_rol)
    {
        //	найти user по user_whit_new_rol.id
        //	Изменить user.role = user_whit_new_rol.role
        /*
			Если  роль пользователя поменялась с Менеджер на Сотрудник, все существующие активные заявки на отпуск, 
			которые ожидают его подтверждения автоматически считаются подтвержденными. 
			Если такие заявки, еще не были ему отправлены, то человек просто исчезает из цепочки утверждающих.  
         */
    }

    [HttpPost]
    int CreateUser(UserDto user)
    {
        //	Создать пользователя
        return new User().Id;
    }
    /*
     Сценарии использования
		Управление пользователями 
			1. Пользователь с ролью Администратор входит в систему “Отпуск”, используя предопределенные логин-пароль.
		    2. Администратор видит список всех пользователей
			3. Администратор.может зарегистрировать нового пользователя 
			4. Администратор может найти необходимого пользователя по имени-фамилии, или емейлу. 
			5. Для каждого пользователя показана следующая информация: 
				a. Имя-фамилия
				b. логин
				c. Емейл
				d. Роль в системе.
			6. Администратор нажимает Редактировать  (Edit). 
			7. Поле задания роли становится активным. 
			8. Администратор выбирает роль из выпадающего списка: Сотрудник (Employee) или Менеджер (Manager).
			9. Администратор нажимает Сохранить. Роль пользователя поменялась. 
			10. Если  роль пользователя поменялась с Менеджер на Сотрудник, все существующие активные заявки на отпуск, которые ожидают его подтверждения автоматически считаются подтвержденными. Если такие заявки, еще не были ему отправлены, то человек просто исчезает из цепочки утверждающих.  
     */
}

/*
Сотрудник (Employee):. 
	◦ Может оставлять заявку на отпуск
	◦ Может просмотреть статистику своих заявок на отпуск
Менеджер (Manager):
	◦ Может оставлять заявки на отпуск, как обычный сотрудник 
	◦ Может просмотреть статистику своих заявок на отпуск
 */
[Route("[controller]/[action]")]
[ApiController]
[Produces("application/json")]
[Authorize(Roles = "Employee, Manager")]
public class EmployerController : ControllerBase
{
    [HttpPost]
    int СreateRequest(RequestDto request)
    {
        /*
         Создание заявки
            1. Сотрудник компании может оставить заявку на следующие типы отпусков: 
                a. Оплачиваемый отпуск
                b. Административный (неоплачиваемый) плановый отпуск
                c. Административный (неоплачиваемый) отпуск по причине форс-мажора (день в день)
                d. Учебный отпуск
                e. Социальный отпуск (по причине смерти близкого)
                f. Больничный с больничным листом
                g. Больничный без больничного листа
            2.  При создании заявки сотрудник указывает следующую информацию: 
                a. Тип отпуска
                b. Даты
                c. (для больничных) Полный день или полдня
                d. Причину взятия отпуска 
                e. Свою проектную роль
                f. Участие в проекте (член команды, дедикейтид, представленный заказчику, или нет)
                g. (в случае необходимости) Список людей с ролью Менеджер, которые должны подписать отпуск, в соответствии с типом отпуска,  проектной ролью, участием в проекте и корпоративной политикой. 
            3. Сотрудник может дублировать уже существующую заявку на отпуск в любом статусе.
            4. Система не проверяет количество оставшихся/израсходованных дней отпуска, даты прохождения ИС и прочее. Эти проверки вручную осуществляет бухгалтерия на первом этапе утверждения заявки. 
         */

        //	Бугалтерия зачит всегда дожна быть в списке подписчиков
        //	Не понятно при каком типе отпуска нужно указывать подписчиков?
        //	отправлять на почту - это во фронте делать наверно надо или тут же?

        /*
        Утверждение заявки менеджерами
		Заявки бывают следующих типов:  
			• Заявки утверждаемые цепочкой менеджеров, зависящей от проектной роли (должности) человека и его участием в проекте: 
				◦ Очередной оплачиваемый отпуск (Paid leave)
				◦ Административный (неоплачиваемый) отпуск  (Administrative unpaid leave)
				◦ Учебный отпуск (Study leave)
			• Заявка утверждаемые только бухгалтерией:  
				◦ Административный отпуск по причине форс-мажора (Force majeure administrative leave)
				◦ Социальный отпуск (Social leave)
			• Заявка на больничный, которая также утверждается только бухгалтерией:  
				◦ Больничный с больничным листом (Sick leave with documents)
				◦ Больничный без больничного листа (Sick leave without documents)
		*/
		/*
				
         Сценарии использования: Создание заявки на отпуск
			1. Пользователь входит в систему “Отпуск”, используя свои логин-пароль. 
			2. Пользователь нажимает Создать заявку. 
			3. Пользователь выбирает следующее: 
				a. Тип отпуска 
				b. Даты 
				c. (для больничных) полдня или целый день
				d. Причина взятия отпуска/комментарий (поле обязательное для некоторых видов отпусков, см. Описание контролов). 
			4. В случае, если тип отпуск требует утверждения у нескольких людей (например, очередной оплачиваемый отпуск), пользователь выбирает следующее: 
				a. Проектная роль
				b. Тип участия  в проекте
				c. Люди, которые должны утвердить отпуск.   
			5. Если все заполнено правильно, создается заявка на отпуск. 
			6. Соответствующее сообщение отправляется на почту бухгалтерии. После утверждения заявки на отпуск бухгалтерией, соответствующая информация высылается другим менеджерам по порядку, если надо.
         */


        //	Наши типы отпусков в бд RequestType:
        //		1,Paid holiday,Оплачиваемый отпуск,false
        //		2,Admin (unpaid) planned,Административный (неоплачиваемый) плановый отпуск,false
        //		3,Admin (unpaid) force majeure,Административный (неоплачиваемый) отпуск по причине форс-мажора,false
        //		4,Study,Учебный отпуск,false
        //		5,Social,Социальный отпуск (по причине смерти близкого),false
        //		6,Sick with docs,Больничный с больничным листом,false
        //		7,Sick without docs,Больничный без больничного листа,false
        return request.Id;
    }

    [HttpPut]
    void EditRequest(RequestDto requestDto)
    {
        /*
         Изменение заявки на отпуск
            1. До первого утверждения сотрудник может полностью изменить заявку на отпуск или удалить ее.
            2. После первого утверждения, но раньше финального утверждения, сотрудник может изменить человека подписывающего отпуск в списке еще не подписавших.
            3. После финального утверждения сотрудник может отменить заявку на отпуск. В этом случае отмену заявки подтверждает только бухгалтерия. 
            4. После финального утверждения сотрудник может  изменить даты заявки. В этом случае заявка должна пройти снова утверждение у всех ответственных лиц, как при начальном утверждении.
            
        Сценарии использования: Изменение заявки на отпуск
		Изменение неутвержденной заявки (состояние “Новая”)
			1. Пользователь входит в систему “Отпуск”, используя свои доменные логин-пароль.
			2. Пользователь видит список своих заявок.
			3. Пользователь выбирает заявку в состоянии “Новая” (New) и нажимает  Просмотреть (View). 
			4. Открывается страница с деталями заявки. 
			5. Пользователь нажимает Редактировать (Edit).
			6. Заявка становится доступна для полного редактирования (изменить можно все). После изменения в бухгалтерию отправляется повторное письмо с заявкой. 

		Изменение частично утвержденной заявки (состояние “В процессе”)
			1. Пользователь входит в систему “Отпуск”, используя свои доменные логин-пароль.
			2. Пользователь видит список своих заявок.
			3. Пользователь выбирает заявку в состоянии “В процессе” (In progress) и нажимает Просмотреть (View). 
			4. Открывается страница с деталями заявки. 
			5. Пользователь нажимает Редактировать (Edit).
			6. Заявка позволяет изменить людей, еще не подписавших заявку. После изменения возможно одно из двух:
				a. Изменен следующий человек в цепочке: Новому менеджеру отправляется письмо.
				b. Изменен человек, который не должен еще подписывать заявку (не следующий за последним подписавшим): Не происходит никаких дополнительных действий.
		
		Изменение полностью утвержденной заявки (состояние  “Утверждена”)
			1. Пользователь входит в систему “Отпуск”, используя свои доменные логин-пароль.
			2. Пользователь видит список своих заявок.
			3. Пользователь выбирает заявку в состоянии “Утверждена” (Approved), у которой конечная дата (To) позже текущей даты, и нажимает Просмотреть (View). 
			4. Открывается страница с деталями заявки. 
			5. Пользователь нажимает Редактировать (Edit).
			6. Появляется сообщение: “Do you really want to edit the approved request?” (“Вы действительно хотите изменить утвержденную заявку?”)
			7. Если пользователь нажимает Да, заявка открывается для редактирования. 
			8. Пользователь может поменять:
				a. Даты
				b. Причину
				c. Людей подтверждающих заявку 
			9. После того, как пользователь нажал Сохранить:
				a. Старая заявка переходит в состояние Отменена (Rejected). В причине отмены заявки:”Modified by the owner” (“Изменена сотрудником”) 
				b. В системе появляется новая заявка, которая должна пройти новый цикл утверждения.
        */
        
        //	Наши типы отпусков в бд StateDetail:
        //		1,New,"Новая (New) Заявка создана в системе, но не получено еще ни одного утверждения/отказа",false
        //		2,In progress,"Заявка получила минимум одно утверждение, но не была утверждена всеми людьми из цепочки менеджеров ",false
        //		3,Approved,"Заявка была утверждена всеми людьми из цепочки менеджеров, отпуск считается утвержденным.",false
        //		4,Rejected,"Заявка была отклонена кем-то из цепочки менеджеров. Отпуск не утвержден. Сотрудник может составить новую заявку. Заявка также считается отклоненной, если сотрудник лично отменил ее или изменил ее.",false
        //		6,Deleted,Заявка была Удалена пользователем,false
    }

    [HttpPost]
    int CopyRequest(int id)
    {
	    /*
	    Сценарии использования:Дублирование заявки на отпуск
			1. Пользователь входит в систему “Отпуск”, используя свои доменные логин-пароль.
			2. Пользователь видит список своих заявок.
			3. Пользователь выбирает заявку в  любом и нажимает  Просмотреть (View). 
			4. Открывается страница с деталями заявки. 
			5. Пользователь нажимает Дублировать (Duplicate).
			6. Открывается страница создания новой заявки, заполненная информацией из дублируемой заявки.
	     */
        return new Request().Id;
    }

    [HttpGet]
    List<Request> GetRequests(RequestDto filter = null)
    {
        /*
         Статистика заявок
            1. Сотрудник может просмотреть статус любой своей  заявки на отпуск.
            2. Сотрудник может просмотреть  количество использованных дней отпуска каждого типа в году.  
        */
        //	Если фильтр filter == null то вернуть всех
        //	иначе вернуть похожие по указаному фильтру
        //	выводить старницами, по 10 елементов на страницу
        return new List<Request>();
    }

    [HttpGet]
    Request GetRequestDetails(int id)
    {
        //	детальная информация о заявке
        return new Request();
    }

    [HttpDelete]
    void DeleteRequest(int request_id)
    {
	    /*
	     Сценарии использования: Отмена полностью утвержденной заявки или заявки в процессе утверждения
			1. Пользователь входит в систему “Отпуск”, используя свои доменные логин-пароль.
			2. Пользователь видит список своих заявок.
			3. Пользователь выбирает заявку в состоянии “Утверждена” (Approved) или “В процессе” (In progress), у которой конечная дата (To) позже текущей даты, и нажимает Просмотреть (View). 
			4. Открывается страница с деталями заявки. 
			5. Пользователь нажимает Отменить (Decline).
			6. Появляется сообщение: “Do you really want to decline the approved request?” (“Вы действительно хотите изменить утвержденную заявку?”)
			7. Если пользователь нажимает Да, заявка переходит в состояние Отменена (Rejected). В причине отмены заявки:”Declined by the owner” (“Отменена сотрудником”) 
			8. Все люди уже утвердившие заявку получают соответствующее уведомление на почту, как  и в случае отмены заявки в середины цепочки.
	    */
	    
        //if request.StateDetailId == 1, New
        //	request.StateDetailId = 5 Deleted Заявка была Удалена пользователем до первой подписи 
    }


    [HttpPut]
    void EditRequestUserSignature(int requestId, List<UserSignature> users)
    {
    }

    [HttpGet]
    void GetDays()
    {
        //	Получить количество дней которые полил работник з начала года до текушей даты
    }
    //	Наверно нужно создать еще свои пользовательские ошибки? И кидать когда нужно, что бы потом обработчик ошибок в midelwares их записал в лог и выдал потом нужный Http статус?

    /*
     Ошибки
		Пользователя
			1.Пользователь выбрал даты полностью или частично в прошлом. 
				Сообщение:”The dates are in the past. Please change the dates” (“Даты в прошлом. Пожалуйста, измените даты”) Заявка не создается
		
			2.Пользователь выбрал даты, которые пересекаются с уже существующей заявкой на отпуск (утвержденной или в процессе)
				Сообщение:”There is another request for these dates. Do you really want to create one more request?” (“Есть другая  заявка на эти даты. Вы хотите создать еще одну заявку?”)
				Yes (Да)  - заявка создается
				No (Нет) - заявка не создается
		
			3.Пользователь оставил незаполненным одно из обязательных полей
				Сообщение:”This field is required” (“Это обязательное поле”)
				Заявка не создается.
     */
}


/*
Бухгалтерия (Accounting): Роль пользователя Бухгалтерия - это обобщенная роль для нескольких людей.  
	◦ Первым подписывает заявку на любой отпуск
	◦ Получает нотификацию о полностью подписанной заявке 
	◦ Может в любой момент просмотреть статистику заявок
	
Менеджер (Manager):
	◦ Подписывает заявку на отпуск
	◦ Может в любой момент просмотреть статистику заявок 
 */
[Route("[controller]/[action]")]
[ApiController]
[Produces("application/json")]
[Authorize(Roles = "Manager, Accounting")]
public class ManagerController : ControllerBase
{
    [HttpGet] // Тут нужен get потому что иначе не сможем подписывать по ссылке
    void RequestApproved(int requestId)
    {
        /*
         Утверждение заявки
            1. Люди ответственные за утверждение заявки получают соответствующую нотификацию на почту, когда приходит их очередь утверждать заявку. 
            2. Заявка отправляется  последовательно и не может быть подписана очередным участником, пока она не прошла все предыдущие шаги цепочки. 
            3. Если  в заявке указано несколько людей с одинаковой ролью, то заявка отправляется участникам в том порядке, в каком они указаны.
            4. Заявку можно утвердить/отклонить кнопкой из письма или непосредственно в системе. 
            5. При отклонении заявки указывать причину обязательно. 
            6. В любой момент менеджер может увидеть список и состояние всех пришедших к нему заявок.
            
        Утверждение заявки менеджерами
		Заявки бывают следующих типов:  
			• Заявки утверждаемые цепочкой менеджеров, зависящей от проектной роли (должности) человека и его участием в проекте: 
				◦ Очередной оплачиваемый отпуск (Paid leave)
				◦ Административный (неоплачиваемый) отпуск  (Administrative unpaid leave)
				◦ Учебный отпуск (Study leave)
			• Заявка утверждаемые только бухгалтерией:  
				◦ Административный отпуск по причине форс-мажора (Force majeure administrative leave)
				◦ Социальный отпуск (Social leave)
			• Заявка на больничный, которая также утверждается только бухгалтерией:  
				◦ Больничный с больничным листом (Sick leave with documents)
				◦ Больничный без больничного листа (Sick leave without documents)

        Сценарии использования: Утверждение заявки на отпуск   
        Из письма
            1. Пользователь, представитель бухгалтерии или менеджер, получает на почту письмо о том, что ему надо утвердить заявку на отпуск.
            2. Пользователь внимательно ознакамливается с информацией в заявке и нажимает “Утвердить” в письме.
            3. Открывается страница системы “Отпуск” с сообщением:”The request is approved!” (”Заявка успешно утверждена!”).
            4. В случае если требуется дальнейшее подтверждение заявки, следующий в цепочке менеджеров получает соответствующее письмо.  Заявка остается в состоянии:In progress (”В процессе”), но исчезает из списка заявок требующих утверждения данного пользователя, переходя в список заявок утвержденных им. 
            5. В случае если дальнейшее подтверждение заявки не требуется, на почту бухгалтерии и человека оставившего заявку приходят соответствующие письма. Заявка переходит в состояние:Approved (”Утверждена”).
        Из системы “Отпуск”
            1. Пользователь, представитель бухгалтерии или менеджер, входит в систему “Отпуск”, используя свои доменные логин-пароль.
            2. Пользователь видит список заявок, требующих его утверждения.
            3. Пользователь внимательно ознакамливается с информацией в заявке и нажимает “Утвердить” для соответствующей заявки.
            4. Открывается страница системы “Отпуск” с сообщением:”The request is approved!” (”Заявка успешно утверждена!”).
            5. В случае если требуется дальнейшее подтверждение заявки, следующий в цепочке менеджеров получает соответствующее письмо.  Заявка остается в состоянии:In progress (”В процессе”), но исчезает из списка заявок требующих утверждения данного пользователя, переходя в список заявок утвержденных им. 
            6. В случае если дальнейшее подтверждение заявки не требуется, на почту бухгалтерии и человека оставившего заявку приходят соответствующие письма. Заявка переходит в состояние:Approved (”Утверждена”).
            
         */

        //	Получить текушего менеджера
        //	подписать usersignature
    }

    [HttpGet]
    void RequestRejected(int requestId)
    {
	    /*
	     Сценарии использования: Отклонение заявки на отпуск   
	     Из письма
			1. Пользователь, представитель бухгалтерии или менеджер, получает на почту письмо о том, что ему надо утвердить заявку на отпуск.
			2. Пользователь внимательно ознакамливается с информацией в заявке и нажимает “Отклонить” в письме.
			3. Открывается страница системы “Отпуск”, на которой пользователь вводит причину отказа. 
			4. Заявка переходит в состояние: Rejected (”Отклонена”),  исчезает из списка заявок требующих утверждения данного пользователя, переходя в список заявок отклоненных им. 
			5. На почту человека оставившего заявку приходит соответствующее письмо. Заявка переходит в состояние: Rejected (”Отклонена”).
			6. На почту людей, который утвердили заявку ранее, приходит соответствующее уведомление. 
		Из системы “Отпуск”
			1. Пользователь, представитель бухгалтерии или менеджер, входит в систему “Отпуск”, используя свои доменные логин-пароль.
			2. Пользователь видит список заявок, требующих его утверждения.
			3. Пользователь внимательно ознакамливается с информацией в заявке и нажимает “Отклонить” для соответствующей заявки.
			4. Открывается страница системы “Отпуск”, на которой пользователь вводит причину отказа. 
			5. Заявка переходит в состояние:Rejected (”Отклонена”),  исчезает из списка заявок требующих утверждения данного пользователя, переходя в список заявок отклоненных им. 
			6. На почту человека оставившего заявку приходит соответствующее письмо. Заявка переходит в состояние:Rejected (”Отклонена”).
			7. На почту людей, который утвердили заявку ранее, приходит соответствующее уведомление. 	
     */
	    
    }

    [HttpGet]
    List<Request> GetRequests(RequestDto filter)
    {
        //	Получить по фильтру
        //	Менеджер или Бугалтерия видит список заявок, требующих их утверждения.
        return new List<Request>();
    }

    [HttpGet]
    Request GetRequestDetails(int id)
    {
	    return new Request();
    }
    /*
     Ошибки
	Менеджера и бугалтерии YES
		1.Пользователь пытается повторно утвердить заявку из письма
			В открывшейся системе “Отпуск”, пользователь получает  сообщение:
			”The request has already been approved!” (“Заявка уже успешно утверждена!”)
		
		2.Пользователя убрали из списка людей, которые должны утвердить заявку, и пользователь 
		пытается утвердить заявку из письма.  Или же роль пользователя сменили с Менеджера на
		Сотрудник и он пытается утвердить заявку из письма.
			В открывшейся системе “Отпуск”, пользователь получает  сообщение:
			”The request is not actual!” (“Заявка не актуальна!”)
		
		3.Пользователь не залогинен в систему Отпуск и пытается утвердить заявку из письма.
			Сперва открывается страница логина, после корректного ввода логин/пароля пользователь получает страницу
			с сообщением, что заявка утверждена.
			
	Менеджера И бугалтерии NO
		1. Пользователь пытается отклонить/подтвердить отклоненную заявку из письма
			В открывшейся системе “Отпуск”, пользователь получает  сообщение:”The request has already been rejected!” (“Заявка уже отклонена!”)
		2. Пользователя убрали из списка людей, которые должны утвердить заявку, и пользователь пытается отклонить заявку из письма. Или роль изменена на Сотрудник  и пользователь пытается отклонить заявку
			В открывшейся системе “Отпуск”, пользователь получает  сообщение:”The request is not actual!” (“Заявка не актуальна!”)
		3. Пользователь не залогинен в систему Отпуск и пытается отменить заявку из письма.
			Сперва открывается страница логина, после корректного ввода логин/пароля пользователь получает страницу для ввода причины отмены заявки. .
     */
}